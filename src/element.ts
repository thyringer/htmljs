
import { HTMLAttributes } from './attributes.ts';


export class HTMLElement {

	static Symbol = Object.freeze({
		a: Symbol("a"),
		abbr: Symbol("abbr"),
		address: Symbol("address"),
		area: Symbol("area"),
		article: Symbol("article"),
		aside: Symbol("aside"),
		audio: Symbol("audio"),
		b: Symbol("b"),
		base: Symbol("base"),
		bdi: Symbol("bdi"),
		bdo: Symbol("bdo"),
		blockquote: Symbol("blockquote"),
		body: Symbol("body"),
		br: Symbol("br"),
		button: Symbol("button"),
		canvas: Symbol("canvas"),
		caption: Symbol("caption"),
		cite: Symbol("cite"),
		code: Symbol("code"),
		col: Symbol("col"),
		colgroup: Symbol("colgroup"),
		data: Symbol("data"),
		datalist: Symbol("datalist"),
		dd: Symbol("dd"),
		del: Symbol("del"),
		details: Symbol("details"),
		dfn: Symbol("dfn"),
		dialog: Symbol("dialog"),
		div: Symbol("div"),
		dl: Symbol("dl"),
		dt: Symbol("dt"),
		em: Symbol("em"),
		embed: Symbol("embed"),
		fieldset: Symbol("fieldset"),
		figcaption: Symbol("figcaption"),
		figure: Symbol("figure"),
		footer: Symbol("footer"),
		form: Symbol("form"),
		h1: Symbol("h1"),
		h2: Symbol("h2"),
		h3: Symbol("h3"),
		h4: Symbol("h4"),
		h5: Symbol("h5"),
		h6: Symbol("h6"),
		head: Symbol("head"),
		header: Symbol("header"),
		hgroup: Symbol("hgroup"),
		hr: Symbol("hr" ),
		html: Symbol("html"),
		i: Symbol("i"),
		iframe: Symbol("iframe"),
		img: Symbol("img"),
		input: Symbol("input"),
		ins: Symbol("ins"),
		kbd: Symbol("kbd"),
		label: Symbol("label"),
		legend: Symbol("legend"),
		li: Symbol("li"),
		link: Symbol("link"),
		main: Symbol("main"),
		map: Symbol("map"),
		mark: Symbol("mark"),
		math: Symbol("math"),
		menu: Symbol("menu"),
		menuitem: Symbol("menuitem"),
		meta: Symbol("meta" ),
		meter: Symbol("meter"),
		nav: Symbol("nav"),
		noscript: Symbol("noscript"),
		object: Symbol("object"),
		ol: Symbol("ol"),
		optgroup: Symbol("optgroup"),
		option: Symbol("option"),
		output: Symbol("output"),
		p: Symbol("p"),
		param: Symbol("param"),
		picture: Symbol("picture"),
		pre: Symbol("pre"),
		progress: Symbol("progress"),
		q: Symbol("q"),
		rb: Symbol("rb"),
		rp: Symbol("rp"),
		rt: Symbol("rt"),
		rtc: Symbol("rtc"),
		ruby: Symbol("ruby"),
		s: Symbol("s"),
		samp: Symbol("samp"),
		script: Symbol("script"),
		section: Symbol("section"),
		select: Symbol("select"),
		slot: Symbol("slot"),
		small: Symbol("small"),
		source: Symbol("source"),
		span: Symbol("span"),
		strong: Symbol("strong"),
		style: Symbol("style"),
		sub: Symbol("sub"),
		summary: Symbol("summary"),
		sup: Symbol("sup"),
		svg: Symbol("svg"),
		table: Symbol("table"),
		tbody: Symbol("tbody"),
		td: Symbol("td"),
		template: Symbol("template"),
		textarea: Symbol("textarea"),
		tfoot: Symbol("tfoot"),
		th: Symbol("th"),
		thead: Symbol("thead"),
		time: Symbol("time"),
		title: Symbol("title"),
		tr: Symbol("tr"),
		track: Symbol("track"),
		u: Symbol("u"),
		ul: Symbol("ul"),
		var: Symbol("var"),
		video: Symbol("video"),
		wbr: Symbol("wbr")
	})


	#attributes;
	symbol: symbol;
	content: Array<string | HTMLElement | (() => HTMLElement)> | null

	constructor(
		symbol: symbol,
		attributes: Object,
		content: Array<string | HTMLElement | (() => HTMLElement)> | null = null
	) {
		this.symbol = symbol;
		this.#attributes = attributes;
		this.content = content;
	}


	static hasAttr(obj) {
		return !(obj instanceof HTMLElement) && typeof obj !== "string" && HTMLAttributes.some(obj);
	}

	/**
	 * Returns a constructor for a non-empty HTML element whose first argument can be an object representing attributes.
	 * @param {Symbol} symbol 
	 * @returns {(...content: any[]) => HTMLElement}
	 */
	static NonVoid(symbol) {
		return (...content) => new HTMLElement(
			symbol,
			new HTMLAttributes(HTMLElement.hasAttr(content[0]) ? content.shift() : {}),
			content
		);
	}

	/**
	 * Returns a constructor for an empty HTML element whose argument can be an object representing attributes.
	 * @param {Symbol} symbol
	 * @returns {(attributes?: {}) => HTMLElement}
	 */
	static Void(symbol) {
		return (attributes = {}) => new HTMLElement(symbol, new HTMLAttributes(attributes));
	}


	// ELEMENT ATTRIBUTES

	get attributes() {
		return this.#attributes;
	}


	/**
	 * @param {HTMLAttributes | Object} obj - An Attributes instance or an object to convert
	 */
	set attributes(obj) {
		this.#attributes = obj instanceof HTMLAttributes ? obj : new HTMLAttributes(obj);
	}


	/**
	 * Adds additional attributes or overwrites existing ones.
	 * @param {Object} obj 
	 * @returns 
	 */
	set(obj) {
		Object.assign(this.attributes, obj);
		return this;
	}


	// SETTERS FOR GLOBAL ATTRIBUTES

	/**
	 * 
	 * @param {string} value single printable character including accented and others that can be generated by keyboard
	 * @returns 
	 */
	accesskey(value) {
		this.attributes.accesskey = value;
		return this;
	}

	/**
	 * 
	 * @param  {...string} values 
	 */
	class(...values) {
		this.attributes.class = values;
		return this;
	}

	/**
	 * 
	 * @param {bool} value 
	 */
	contenteditable(value) {
		this.attributes.contenteditable = value;
		return this;
	}

	/**
	 * 
	 * @param {'ltr' | 'rtl' | 'auto'} value 
	 */
	dir(value) {
		this.attributes.dir = value;
		return this;
	}

	/**
	 * 
	 * @param {boolean | 'auto'} value 
	 */
	draggable(value) {
		this.attributes.draggable = value;
		return this;
	}

	/**
	 * 
	 * @param {'done' | 'enter' | 'go' | 'next' | 'previous' | 'search' | 'send'} value 
	 */
	enterkeyhint(value) {
		this.attributes.enterkeyhint = value;
		return this;
	}

	hidden() {
		this.attributes.hidden = null;
		return this;
	}	

	id(value) {
		this.attributes.id = value;
		return this;
	}

	/**
	 * 
	 * @param {null | string} value 
	 */
	inert(value=null) {
		this.attributes.inert = value;
		return this;
	}

	/**
	 * 
	 * @param {'text' | 'none' | 'tel' | 'email' | 'url' | 'numeric' | 'decimal' | 'search'} value 
	 */
	inputmode(value=null) {
		this.attributes.inputmode = value;
		return this;
	}

	/**
	 * 
	 * @param {string} value two-letter language code (lowercase)
	 */
	lang(value) {
		this.attributes.lang = value;
		return this;
	}

	popover() {
		this.attributes.popover = null;
		return this;
	}

	/**
	 * 
	 * @param {boolean} value 
	 */
	spellcheck(value) {
		this.attributes.spellcheck = value;
		return this;
	}

	/**
	 * 
	 * @param {string} value 
	 */
	style(value) {
		this.attributes.style = value;
		return this;
	}

	/**
	 * 
	 * @param {bigint} value 
	 */
	tabindex(value) {
		this.attributes.tabindex = value;
		return this;
	}

	/**
	 * 
	 * @param {string} value 
	 */
	title(value) {
		this.attributes.title = value;
		return this;
	}

	/**
	 * 
	 * @param {'yes' | 'no'} value 
	 */
	translate(value) {
		this.attributes.translate = value;
		return this;
	}

	// SETTERS FOR SPECIFIC ATTRIBUTES

	alt(value) {
		this.attributes.alt = value;
		return this;
	}


	charset(value) {
		this.attributes.charset = value;
		return this;
	}


	cols(value) {
		this.attributes.cols = value;
		return this;
	}


	colspan(value) {
		this.attributes.colspan = value;
		return this;
	}


	disabled() {
		this.attributes.disabled = null;
		return this;
	}


	for(value) {
		this.attributes.for = value;
		return this;
	}


	height(value) {
		this.attributes.height = value;
		return this;
	}


	href(value) {
		this.attributes.href = value;
		return this;
	}


	max(value) {
		this.attributes.max = value;
		return this;
	}


	min(value) {
		this.attributes.min = value;
		return this;
	}


	name(value) {
		this.attributes.name = value;
		return this;
	}


	placeholder(value) {
		this.attributes.placeholder = value;
		return this;
	}


	readonly() {
		this.attributes.readonly = null;
		return this;
	}


	required() {
		this.attributes.required = null;
		return this;
	}


	rows(value) {
		this.attributes.rows = value;
		return this;
	}


	rowspan(value) {
		this.attributes.rowspan = value;
		return this;
	}


	selected() {
		this.attributes.selected = null;
		return this;
	}


	size(value) {
		this.attributes.size = value;
		return this;
	}


	src(value) {
		this.attributes.src = value;
		return this;
	}


	step(value) {
		this.attributes.step = value;
		return this;
	}


	type(value) {
		this.attributes.type = value;
		return this;
	}


	value(value) {
		this.attributes.value = value;
		return this;
	}

	
	width(value) {
		this.attributes.width = value;
		return this;
	}


	// MOUSE EVENTS
	
	/**
	 * 
	 * @param {Function} handler 
	 */
	onclick(handler) {
		this.attributes.onclick = handler;
		return this;
	}
	
	/**
	 * 
	 * @param {Function} handler 
	 */
	ondblclick(handler) {
		this.attributes.ondblclick = handler;
		return this;
	}
	
	/**
	 * 
	 * @param {Function} handler 
	 */
	onmousedown(handler) {
		this.attributes.onmousedown = handler;
		return this;
	}
	
	/**
	 * 
	 * @param {Function} handler 
	 */
	onmouseup(handler) {
		this.attributes.onmouseup = handler;
		return this;
	}
	
	/**
	 * 
	 * @param {Function} handler 
	 */
	onmouseover(handler) {
		this.attributes.onmouseover = handler;
		return this;
	}
	
	/**
	 * 
	 * @param {Function} handler 
	 */
	onmouseout(handler) {
		this.attributes.onmouseout = handler;
		return this;
	}
	
	/**
	 * 
	 * @param {Function} handler 
	 */
	onmousemove(handler) {
		this.attributes.onmousemove = handler;
		return this;
	}
	
	/**
	 * 
	 * @param {Function} handler 
	 */
	onmouseenter(handler) {
		this.attributes.onmouseenter = handler;
		return this;
	}
	
	/**
	 * 
	 * @param {Function} handler 
	 */
	onmouseleave(handler) {
		this.attributes.onmouseleave = handler;
		return this;
	}
	
	/**
	 * 
	 * @param {Function} handler 
	 */
	oncontextmenu(handler) {
		this.attributes.oncontextmenu = handler;
		return this;
	}


	// GENERATING TAGS

	/**
	 * @returns {string}
	 */
	toTag() {
		return `<${this.symbol.description}${this.attributes.expand()}>`
	}

	/**
	 * @returns {string}
	 */
	toEndTag() {
		return `</${this.symbol.description}>`
	}


	// GENERATING HTML

	/**
	 * Generates the actual HTML code from the element described in JS and also expands its content.
	 * @param style null → no styling | negative → tab | 0 → no indent | positive → spaces per depth
	 * @param offset Number of indentations of the outermost tag.
	 * @returns The (formatted) HTML string.
	 */
	expand(style: number | null = null, offset: number = 0): string {
		let stack: string[] = [];

		if (this.symbol === HTMLElement.Symbol.html) {
			stack.push("<!DOCTYPE html>");
		}

		const baseIndent = style == null ? "" : style < 0 ? "\t" : " ".repeat(style);
		let depth = Math.abs(offset);

		function expand(element) {
			const indent = style == null ? "" : "\n" + baseIndent.repeat(depth);
			let endIndent = "";

			stack.push(indent, element.toTag());

			if (Array.isArray(element.content)) {
				depth += 1;

				for (let part of element.content) {
					if (part == null) {
						continue;
					}
					else if (typeof (part as (() => HTMLElement)) === "function") {
						stack.push(part().toTag());
						endIndent = indent;
					}
					else if (part instanceof HTMLElement) {
						expand(part);
						endIndent = indent;
					}
					else {
						stack.push(part);
					}
				}

				stack.push(endIndent, element.toEndTag());
				depth -= 1;
			}
		}

		expand(this);
		return stack.join("").trimStart();
	}
}
